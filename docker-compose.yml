# version: "3.8"

services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: grpc_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

  authentication:
    build:
      context: ./authentication
      dockerfile: Dockerfile
    container_name: authentication
    depends_on:
      - postgres
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=grpc_db
    ports:
      - "3002:3002" # gRPC port
    networks:
      - backend

  product:
    build:
      context: ./product
      dockerfile: Dockerfile
    container_name: product
    depends_on:
      - postgres
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=grpc_db
    ports:
      - "3003:3003"
    networks:
      - backend

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway
    depends_on:
      - authentication
      - product
    environment:
      AUTH_GRPC_URL: authentication:3002
      PRODUCT_GRPC_URL: product:3003
    ports:
      - "3001:3001"
    networks:
      - backend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    depends_on:
      - gateway
    environment:
      NEXT_PUBLIC_GATEWAY_API_URL: http://gateway:3001
    networks:
      - backend

  adminer:
    container_name: adminer
    image: adminer
    ports:
      - "8081:8080"
    networks:
      - backend
    restart: always

volumes:
  pgdata:

networks:
  backend:
    driver: bridge
